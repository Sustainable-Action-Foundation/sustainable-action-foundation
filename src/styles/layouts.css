.coworkers-grid-layout {
    --nr_columns: ; /* No default value (corresponds to length of fetched array) */ 
    --gap: 1rem;
    --column-width: 256px;
    place-content: center;
    gap: var(--gap);
    width: min(calc(var(--column-width) * var(--nr_columns) + var(--gap) * var(--nr_columns)), 100%);
    grid-template-columns: repeat(auto-fit, var(--column-width));
}

/* Rezises grid to fit parent width */
.news-grid-layout-dynamic {
    gap: 1rem;
    grid-template-columns: repeat(auto-fit, minmax(min(300px, 100%), 1fr));
}

/* Sets grid width to correspond with total column count */
/* We do this to prevent elements from stretching when parent element is considerably larger than the sum of all children */
.news-grid-layout {
    --nr_columns: 3; /* Default value corresponds to our homepage */ 
    --gap: 1rem;
    --column-width: 300px;
    place-content: center;
    gap: var(--gap);
    width: min(calc(var(--column-width) * var(--nr_columns) + var(--gap) * var(--nr_columns)), 100%);
    grid-template-columns: repeat(auto-fit, var(--column-width));
}

/* TODO: Theese layouts cause issues with overflow if viewport width is less than --column-width */
/* Visible in programs grid but not news or coworkers grid as viewport width rarely subceeds 300px */
.programs-grid-layout {
    --nr_columns: 3; /* Default value corresponds to our homepage */ 
    --gap: 3rem;
    --column-width: 375px;
    place-content: center;
    gap: var(--gap);
    width: min(calc(var(--column-width) * var(--nr_columns) + var(--gap) * var(--nr_columns)), 100%);
    grid-template-columns: repeat(auto-fit, var(--column-width));
    @media (max-width: 375px) { /* Want to use --column-width here, find a way around that*/
        grid-template-columns: 1fr;
    }
}